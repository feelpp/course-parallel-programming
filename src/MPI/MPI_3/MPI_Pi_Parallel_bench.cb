#include <mpi.h>
#include <time.h> 
#include <math.h> 
#include <stdio.h> 
#include <stdlib.h> 

#include "liblsb.h"
#define COMPUTATION 0
#define COMMUNICATION 1

#define RUNS 10

int pi_main(int argc, char ** argv);


void monte_carlo_pi(int iters, int* hits, int* misses) {

    int i;
    double x, y;

    // initialize our (crappy) PRNG
    srand(time(NULL));
    // initialize counters
    *hits = 0;
    *misses = 0; 

    for (i=0; i<iters; i++) {
        x = ((double) rand()) / RAND_MAX;
        y = ((double) rand()) / RAND_MAX;

        //check if (x,y) is in the circle and count it
        if (sqrt(x*x+y*y) <= 1.0) 
            *hits += 1;
        else 
            *misses += 1;
    }

    // make sure we do not divide by zero later
    if (*hits == 0) *hits=1;
    if (*misses == 0) *misses=1;
}


int main(int argc, char** argv) {

    MPI_Init(&argc, &argv);
    LSB_Init("parallel_pi", 0);


    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);


    
    LSB_Set_Rparam_int("rank", rank);
    LSB_Set_Rparam_int("size", size);


    for (int i=0; i<RUNS; i++){
        LSB_Set_Rparam_int("run", i);
        pi_main(argc, argv);
    }

    LSB_Finalize();
    MPI_Finalize();
}

int pi_main(int argc, char ** argv){

    double pi;
    int hits, misses;
    int iters = 100000000;

   
    double time;
    int rank, size;
    int local_iters;
    int local_hits, local_misses;

    MPI_Barrier(MPI_COMM_WORLD); //sync for fair timing

    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // how many iterations do we need in each process
    local_iters = iters / size;
    if (rank == 0) local_iters = iters - (local_iters*(size-1));
    printf("process %i will do %i iterations\n", rank, local_iters);


    LSB_Res();
    monte_carlo_pi(local_iters, &local_hits, &local_misses);
    LSB_Rec(COMPUTATION);

    MPI_Barrier(MPI_COMM_WORLD);

    // reduce hits on rank 0
    LSB_Res();
    MPI_Reduce(&local_hits, &hits, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    LSB_Rec(COMMUNICATION);

    if (rank == 0) {
        pi = 4 * (((double) hits) / iters);
        printf("Estimate after %i iterations = %f\n", iters, pi);
        printf("This took %f seconds with %i procs\n", time, size);
    }


}



